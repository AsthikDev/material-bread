{"version":3,"file":"main.1372c80c6ed8549a6487.bundle.js","sources":["webpack:///./src/Utils/Hoverable.js"],"sourcesContent":["import { isHoverEnabled } from './HoverState';\nimport { element, func, oneOfType } from 'prop-types';\nimport React, { Component } from 'react';\n\nexport default class Hoverable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { isHovered: false, showHover: true };\n    this._handleMouseEnter = this._handleMouseEnter.bind(this);\n    this._handleMouseLeave = this._handleMouseLeave.bind(this);\n    this._handleGrant = this._handleGrant.bind(this);\n    this._handleRelease = this._handleRelease.bind(this);\n  }\n\n  _handleMouseEnter() {\n    if (isHoverEnabled() && !this.state.isHovered) {\n      const { onHoverIn } = this.props;\n      if (onHoverIn) onHoverIn();\n      this.setState(state => ({ ...state, isHovered: true }));\n    }\n  }\n\n  _handleMouseLeave() {\n    if (this.state.isHovered) {\n      const { onHoverOut } = this.props;\n      if (onHoverOut) onHoverOut();\n      this.setState(state => ({ ...state, isHovered: false }));\n    }\n  }\n\n  _handleGrant() {\n    this.setState(state => ({ ...state, showHover: false }));\n  }\n\n  _handleRelease() {\n    this.setState(state => ({ ...state, showHover: true }));\n  }\n\n  render() {\n    const { children } = this.props;\n    const child =\n      typeof children === 'function'\n        ? children(this.state.showHover && this.state.isHovered)\n        : children;\n\n    return React.cloneElement(React.Children.only(child), {\n      onMouseEnter: this._handleMouseEnter,\n      onMouseLeave: this._handleMouseLeave,\n      // prevent hover showing while responder\n      onResponderGrant: this._handleGrant,\n      onResponderRelease: this._handleRelease,\n    });\n  }\n}\n\nHoverable.displayName = 'Hoverable';\n\nHoverable.propTypes = {\n  children: oneOfType([func, element]),\n  onHoverIn: func,\n  onHoverOut: func,\n};\n"],"mappings":"AAAA","sourceRoot":""}